version: '3.7'

x-kafka-defaults: &kafka-defaults
  image: confluentinc/cp-kafka:6.2.7
  depends_on:
    - zookeeper

x-kafka-environment-defaults: &kafka-environment-defaults
  KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-a:2281'
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
  KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
  KAFKA_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.apache.kafka=ERROR,kafka=ERROR,kafka.cluster=ERROR,kafka.controller=ERROR,kafka.coordinator=ERROR,kafka.log=ERROR,kafka.server=ERROR,kafka.zookeeper=ERROR,state.change.logger=ERROR,kafka.controller=WARN,kafka.foo.bar=DEBUG"
  KAFKA_NUM_PARTITIONS: 1
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  
services:
  zookeeper-a:
    image: confluentinc/cp-zookeeper:6.2.7
    hostname: zookeeper-a
    container_name: zookeeper-a
    ports:
      - "2281:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2281
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "jps -l | grep zookeeper-a" ]
      interval: 30s
      timeout: 3s
      retries: 5

  kafka-a:
    <<: *kafka-defaults
    hostname: kafka-a
    container_name: kafka-a
    depends_on:
      - zookeeper-a
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "19092:19092"
    environment:
      <<: *kafka-environment-defaults
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-a:9092,PLAINTEXT_HOST://localhost:19092

  schema-registry-a:
    image: confluentinc/cp-schema-registry:6.2.7
    hostname: schema-registry-a
    container_name: schema-registry-a
    depends_on:
      - kafka-a
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-a
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-a:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: backward_transitive

  kafka-ui-a:
    hostname: kafka-ui-a
    container_name: kafka-ui-a
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    depends_on:
      - kafka-a
      - schema-registry-a
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-a:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry-a:8081

  sqlserver-a:
    image: mcr.microsoft.com/mssql/server:2019-latest
    hostname: SQLSERVER-a
    deploy:
        resources:
            limits:
                memory: 2G
            reservations:
                memory: 1G
    environment: 
        ACCEPT_EULA: y
        SA_PASSWORD: MyS@P@ssw0rd
    ports:
        - "1433:1433"
    volumes:
        - mssql:/var/opt/mssql

  localstack:
    image: localstack/localstack
    ports:
      - '4566-4597:4566-4597'
    environment:
      - DEFAULT_REGION=eu-west-1
      - SERVICES=sqs, nsn
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  aws_cli:
    image: amazon/aws-cli
    depends_on: 
      - localstack
    entrypoint: /bin/sh -c
    command: >  
     '
     COUNTER=15;
     SQS_DESIRED_STATE="sqs available";
     SERVICE_ACTUAL_STATE=0;
     
      while [ $$COUNTER -ne 0 ] && [ $$SERVICE_ACTUAL_STATE != 1 ]
      
      do 
      RESPONSE=$$(curl -sb --connect-timeout 2 /dev/null "localstack:4566/health?redirect" | tr -cd [^[:alnum:][:space:]]+) 
      echo " Response from Localstack $$RESPONSE";

      if [[ $$RESPONSE == *"$$SQS_DESIRED_STATE"* ]]; then SERVICE_ACTUAL_STATE=1; else SERVICE_ACTUAL_STATE=0; fi;
      
      COUNTER=$$((COUNTER-1)); 
      echo "Service is not ready yet! $$COUNTER retries left."; 
      sleep 3; 
      done; 
      echo backend is up;

      echo "########### Creating profile ###########"

      aws configure set aws_access_key_id test --profile=default
      aws configure set aws_secret_access_key test --profile=default
      aws configure set region eu-west-1 --profile=default

      echo "########### Listing profile ###########"
      aws configure list --profile=default

      echo "########### Creating SQS ###########"
      aws sqs create-queue --endpoint-url=http://localstack:4566 --queue-name=order-saga --profile=default

      echo "########### Listing SQS ###########"
      aws sqs list-queues --endpoint-url=http://localstack:4566 --profile=default

      '

volumes:
    mssql:
    localstack:
